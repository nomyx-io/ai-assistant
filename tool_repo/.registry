{
  "tools": [
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "pause",
      "version": "1.0.0",
      "description": "Pause execution for the specified duration.",
      "source": "class pauseTool {\n\n  async execute({ duration }, api) {\n    return await new Promise((resolve) => setTimeout(resolve, duration));\n  }\n\n}\n\nmodule.exports = new pauseTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "pause",
        "description": "Pause execution for the specified duration.",
        "methodSignature": "pause(duration: number): void"
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.459Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/pause",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.459Z",
        "lastModifiedDate": "2024-06-27T23:38:31.459Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "list_active_tools",
      "version": "1.0.0",
      "description": "List all the active tools in the current session.",
      "source": "class list_active_toolsTool {\n\n  async execute(params, api) {\n    return Object.keys(api.tools);\n  }\n\n}\n\nmodule.exports = new list_active_toolsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "list_active_tools",
        "methodSignature": "list_active_tools(): string[]",
        "description": "List all the active tools in the current session."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.464Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/list_active_tools",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.464Z",
        "lastModifiedDate": "2024-06-27T23:38:31.464Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_all_performance_metrics",
      "version": "1.0.0",
      "source": "class get_all_performance_metricsTool {\n\n  async execute(params, api) {\n    return performanceMonitor_1.ScriptPerformanceMonitor.getAllMetrics();\n  }\n\n}\n\nmodule.exports = new get_all_performance_metricsTool();",
      "tags": [
        "utility"
      ],
      "schema": {},
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.600Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_all_performance_metrics",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.600Z",
        "lastModifiedDate": "2024-06-27T23:38:31.600Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_history",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass get_tool_historyTool {\n\n  async execute(params, api) {\n    return api.getToolHistory(params.name);\n  }\n\n}\n\nmodule.exports = new get_tool_historyTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.635Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_history",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.635Z",
        "lastModifiedDate": "2024-06-27T23:38:31.635Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "echo",
      "version": "1.0.0",
      "description": "Print the given text to the console",
      "source": "class echoTool {\n\n  async execute({ text }, api) {\n    api.emit('text', text);\n    return text;\n  }\n\n}\n\nmodule.exports = new echoTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "echo",
        "description": "Print the given text to the console",
        "input_schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "The text to print"
            }
          },
          "required": [
            "text"
          ]
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.724Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/echo",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.724Z",
        "lastModifiedDate": "2024-06-27T23:38:31.724Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "generate_tool_report",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass generate_tool_reportTool {\n\n  async execute(params, api) {\n    return api.generateReport(params.format || 'text');\n  }\n\n}\n\nmodule.exports = new generate_tool_reportTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "text",
              "json"
            ],
            "description": "Output format of the report"
          }
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.729Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/generate_tool_report",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.729Z",
        "lastModifiedDate": "2024-06-27T23:38:31.729Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "run_maintenance",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass run_maintenanceTool {\n\n  async execute(params, api) {\n    await api.performMaintenance();\n    return 'Maintenance tasks completed';\n  }\n\n}\n\nmodule.exports = new run_maintenanceTool();",
      "tags": [
        "utility"
      ],
      "schema": {},
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.744Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/run_maintenance",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.744Z",
        "lastModifiedDate": "2024-06-27T23:38:31.744Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "delete_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass delete_toolTool {\n\n  async execute(params, api) {\n    return api.removeTool(params.name);\n  }\n\n}\n\nmodule.exports = new delete_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool to delete"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.839Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/delete_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.839Z",
        "lastModifiedDate": "2024-06-27T23:38:31.839Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "rollback_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass rollback_toolTool {\n\n  async execute(params, api) {\n    return api.rollbackTool(params.name, params.version);\n  }\n\n}\n\nmodule.exports = new rollback_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          },
          "version": {
            "type": "string",
            "description": "Version to rollback to"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.866Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/rollback_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.866Z",
        "lastModifiedDate": "2024-06-27T23:38:31.866Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "rollback_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass rollback_toolTool {\n\n  async execute(params, api) {\n    return api.rollbackTool(params.name, params.version);\n  }\n\n}\n\nmodule.exports = new rollback_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          },
          "version": {
            "type": "string",
            "description": "Version to rollback to"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.867Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/rollback_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.867Z",
        "lastModifiedDate": "2024-06-27T23:38:31.867Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "predict_likely_tools",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass predict_likely_toolsTool {\n\n  async execute(params, api) {\n    return api.predictLikelyTools(params.userRequest);\n  }\n\n}\n\nmodule.exports = new predict_likely_toolsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "userRequest": {
            "type": "string",
            "description": "The user request to analyze"
          }
        },
        "required": [
          "userRequest"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.875Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/predict_likely_tools",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.875Z",
        "lastModifiedDate": "2024-06-27T23:38:31.875Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "run_maintenance",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass run_maintenanceTool {\n\n  async execute(params, api) {\n    await api.performMaintenance();\n    return 'Maintenance tasks completed';\n  }\n\n}\n\nmodule.exports = new run_maintenanceTool();",
      "tags": [
        "utility"
      ],
      "schema": {},
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.925Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/run_maintenance",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.925Z",
        "lastModifiedDate": "2024-06-27T23:38:31.925Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_metadata",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass get_tool_metadataTool {\n\n  async execute(params, api) {\n    return metadataManager_1.MetadataManager.getMetadata(api, params.name);\n  }\n\n}\n\nmodule.exports = new get_tool_metadataTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.974Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_metadata",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.974Z",
        "lastModifiedDate": "2024-06-27T23:38:31.974Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "update_tool_metadata",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass update_tool_metadataTool {\n\n  async execute(params, api) {\n    await metadataManager_1.MetadataManager.addMetadata(api, params.name, params.metadata);\n    return true;\n  }\n\n}\n\nmodule.exports = new update_tool_metadataTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          },
          "metadata": {
            "type": "object",
            "description": "New metadata for the tool"
          }
        },
        "required": [
          "name",
          "metadata"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.979Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/update_tool_metadata",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.979Z",
        "lastModifiedDate": "2024-06-27T23:38:31.979Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "update_tool_metadata",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass update_tool_metadataTool {\n\n  async execute(params, api) {\n    await metadataManager_1.MetadataManager.addMetadata(api, params.name, params.metadata);\n    return true;\n  }\n\n}\n\nmodule.exports = new update_tool_metadataTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          },
          "metadata": {
            "type": "object",
            "description": "New metadata for the tool"
          }
        },
        "required": [
          "name",
          "metadata"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.982Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/update_tool_metadata",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.982Z",
        "lastModifiedDate": "2024-06-27T23:38:31.982Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_performance",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass get_tool_performanceTool {\n\n  async execute(params, api) {\n    return performanceMonitor_1.ScriptPerformanceMonitor.getMetrics(params.name);\n  }\n\n}\n\nmodule.exports = new get_tool_performanceTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:31.988Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_performance",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:31.988Z",
        "lastModifiedDate": "2024-06-27T23:38:31.988Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "analyze_and_create_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass analyze_and_create_toolTool {\n\n  async execute(params, api) {\n    await api.analyzeAndCreateToolFromScript(params.script, params.taskDescription);\n    return 'Analysis and tool creation completed';\n  }\n\n}\n\nmodule.exports = new analyze_and_create_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "script": {
            "type": "string",
            "description": "The script to analyze"
          },
          "taskDescription": {
            "type": "string",
            "description": "Description of the task the script performs"
          }
        },
        "required": [
          "script",
          "taskDescription"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.062Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/analyze_and_create_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.062Z",
        "lastModifiedDate": "2024-06-27T23:38:32.062Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tools_home",
      "version": "1.0.0",
      "description": "Get the path to the tools home directory.",
      "source": "// This is javascript code for a tool module\nclass get_tools_homeTool {\n\n  async execute(params, api) {\n    const thisFolder = __dirname;\n    const toolsHome = thisFolder + '/tools';\n    return toolsHome;\n  }\n\n}\n\nmodule.exports = new get_tools_homeTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "get_tools_home",
        "methodSignature": "get_tools_home(): string",
        "description": "Get the path to the tools home directory."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.134Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tools_home",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.134Z",
        "lastModifiedDate": "2024-06-27T23:38:32.134Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "predict_likely_tools",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass predict_likely_toolsTool {\n\n  async execute(params, api) {\n    return api.predictLikelyTools(params.userRequest);\n  }\n\n}\n\nmodule.exports = new predict_likely_toolsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "userRequest": {
            "type": "string",
            "description": "The user request to analyze"
          }
        },
        "required": [
          "userRequest"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.156Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/predict_likely_tools",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.156Z",
        "lastModifiedDate": "2024-06-27T23:38:32.156Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_history",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass get_tool_historyTool {\n\n  async execute(params, api) {\n    return api.getToolHistory(params.name);\n  }\n\n}\n\nmodule.exports = new get_tool_historyTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.159Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_history",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.159Z",
        "lastModifiedDate": "2024-06-27T23:38:32.159Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "generate_tool_report",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass generate_tool_reportTool {\n\n  async execute(params, api) {\n    return api.generateReport(params.format || 'text');\n  }\n\n}\n\nmodule.exports = new generate_tool_reportTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "text",
              "json"
            ],
            "description": "Output format of the report"
          }
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.161Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/generate_tool_report",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.161Z",
        "lastModifiedDate": "2024-06-27T23:38:32.161Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "analyze_and_create_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass analyze_and_create_toolTool {\n\n  async execute(params, api) {\n    await api.analyzeAndCreateToolFromScript(params.script, params.taskDescription);\n    return 'Analysis and tool creation completed';\n  }\n\n}\n\nmodule.exports = new analyze_and_create_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "script": {
            "type": "string",
            "description": "The script to analyze"
          },
          "taskDescription": {
            "type": "string",
            "description": "Description of the task the script performs"
          }
        },
        "required": [
          "script",
          "taskDescription"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.164Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/analyze_and_create_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.164Z",
        "lastModifiedDate": "2024-06-27T23:38:32.164Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "delete_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass delete_toolTool {\n\n  async execute(params, api) {\n    return api.removeTool(params.name);\n  }\n\n}\n\nmodule.exports = new delete_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool to delete"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.182Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/delete_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.182Z",
        "lastModifiedDate": "2024-06-27T23:38:32.182Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "list_tools",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass list_toolsTool {\n\n  async execute(params, api) {\n    const allTools = await api.getToolList();\n    if (params.tags && params.tags.length > 0) {\n      return allTools.filter(tool => params.tags.every(tag => tool.tags.includes(tag)));\n    }\n    return allTools;\n  }\n\n}\n\nmodule.exports = new list_toolsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional tags to filter tools"
          }
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.321Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/list_tools",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.321Z",
        "lastModifiedDate": "2024-06-27T23:38:32.321Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_performance",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass get_tool_performanceTool {\n\n  async execute(params, api) {\n    return performanceMonitor_1.ScriptPerformanceMonitor.getMetrics(params.name);\n  }\n\n}\n\nmodule.exports = new get_tool_performanceTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.324Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_performance",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.324Z",
        "lastModifiedDate": "2024-06-27T23:38:32.324Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_all_performance_metrics",
      "version": "1.0.0",
      "source": "class get_all_performance_metricsTool {\n\n  async execute(params, api) {\n    return performanceMonitor_1.ScriptPerformanceMonitor.getAllMetrics();\n  }\n\n}\n\nmodule.exports = new get_all_performance_metricsTool();",
      "tags": [
        "utility"
      ],
      "schema": {},
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.330Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_all_performance_metrics",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.330Z",
        "lastModifiedDate": "2024-06-27T23:38:32.330Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "list_all_tools",
      "version": "1.0.0",
      "description": "List all the tools available in the tools home directory.",
      "source": "class list_all_toolsTool {\n\n  async execute(params, api) {\n    const toolsHome = await api.callTool('get_tools_home', {});\n    const tools = await fs.promises.readdir(toolsHome);\n    return tools;\n  }\n\n}\n\nmodule.exports = new list_all_toolsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "list_all_tools",
        "methodSignature": "list_all_tools(): { type: 'array', items: { name: 'string' } }",
        "description": "List all the tools available in the tools home directory."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.331Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/list_all_tools",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.331Z",
        "lastModifiedDate": "2024-06-27T23:38:32.331Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_metadata",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass get_tool_metadataTool {\n\n  async execute(params, api) {\n    return metadataManager_1.MetadataManager.getMetadata(api, params.name);\n  }\n\n}\n\nmodule.exports = new get_tool_metadataTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "required": [
          "name"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.333Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_metadata",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.333Z",
        "lastModifiedDate": "2024-06-27T23:38:32.333Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "utilities_hash",
      "version": "1.0.0",
      "description": "Compute the hash of a value.",
      "source": "// This is javascript code for a tool module\nclass utilities_hashTool {\n\n  async execute(params, api) {\n    const { input } = params;\n    api.debugLog(`utilities_hash called with input: ${input}`);\n    const hash = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(input));\n    api.debugLog(`Hash: ${hash}`);\n    return hash;\n  }\n\n}\n\nmodule.exports = new utilities_hashTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "utilities_hash",
        "description": "Compute the hash of a value.",
        "input_schema": {
          "type": "object",
          "properties": {
            "input": {
              "type": "string",
              "description": "The input value."
            }
          },
          "required": [
            "input"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The hash of the input value."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.384Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/utilities_hash",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.384Z",
        "lastModifiedDate": "2024-06-27T23:38:32.384Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "update_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass update_toolTool {\n\n  async execute(params, api) {\n    const { ScriptValidator } = require('./validator');\n    const isValid = await ScriptValidator.validate(params.source);\n    if (!isValid) {\n      throw new Error('Tool validation failed');\n    }\n    return api.updateTool(params.name, params.source, params.schema, params.tags);\n  }\n\n}\n\nmodule.exports = new update_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool to update"
          },
          "source": {
            "type": "string",
            "description": "New source code of the tool"
          },
          "description": {
            "type": "string",
            "description": "New description of the tool"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "New tags for the tool"
          },
          "schema": {
            "type": "object",
            "description": "New schema for the tool"
          }
        },
        "required": [
          "name",
          "source"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.388Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/update_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.388Z",
        "lastModifiedDate": "2024-06-27T23:38:32.388Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "load_tool_source",
      "version": "1.0.0",
      "description": "Load a tool from a file path and return the source code.",
      "source": "// This is javascript code for a tool module\nclass load_tool_sourceTool {\n\n  async execute({ path }, api) {\n    try {\n      const fs = require('fs').promises;\n      const tool = await fs.readFile(path, 'utf8');\n      return tool;\n    } catch (error) {\n      throw new Error(`Failed to load tool source: ${error.message} Tool source: ${error.stack}`);\n    }\n  }\n\n}\n\nmodule.exports = new load_tool_sourceTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "load_tool_source",
        "methodSignature": "load_tool_source(path: string): string",
        "description": "Load a tool from a file path and return the source code."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.393Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/load_tool_source",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.393Z",
        "lastModifiedDate": "2024-06-27T23:38:32.393Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "update_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass update_toolTool {\n\n  async execute(params, api) {\n    const { ScriptValidator } = require('./validator');\n    const isValid = await ScriptValidator.validate(params.source);\n    if (!isValid) {\n      throw new Error('Tool validation failed');\n    }\n    return api.updateTool(params.name, params.source, params.schema, params.tags);\n  }\n\n}\n\nmodule.exports = new update_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool to update"
          },
          "source": {
            "type": "string",
            "description": "New source code of the tool"
          },
          "description": {
            "type": "string",
            "description": "New description of the tool"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "New tags for the tool"
          },
          "schema": {
            "type": "object",
            "description": "New schema for the tool"
          }
        },
        "required": [
          "name",
          "source"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.459Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/update_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.459Z",
        "lastModifiedDate": "2024-06-27T23:38:32.459Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "utilities_computeAddress",
      "version": "1.0.0",
      "description": "Compute the address of a public key.",
      "source": "// This is javascript code for a tool module\nclass utilities_computeAddressTool {\n\n  async execute(params, api) {\n    const { publicKey } = params;\n    api.debugLog(`utilities_computeAddress called with publicKey: ${publicKey}`);\n    const address = api.ethers.utils.computeAddress(publicKey);\n    api.debugLog(`Address: ${address}`);\n    return address;\n  }\n\n}\n\nmodule.exports = new utilities_computeAddressTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "utilities_computeAddress",
        "description": "Compute the address of a public key.",
        "input_schema": {
          "type": "object",
          "properties": {
            "publicKey": {
              "type": "string",
              "description": "The public key."
            }
          },
          "required": [
            "publicKey"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The address corresponding to the public key."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.474Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/utilities_computeAddress",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.474Z",
        "lastModifiedDate": "2024-06-27T23:38:32.474Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "bash",
      "version": "1.0.0",
      "description": "Execute a bash command",
      "source": "// This is javascript code for a tool module\nclass bashTool {\n\n  async execute({ command }, api) {\n    const { exec } = require('child_process');\n    return new Promise((resolve, reject) => {\n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          reject(error);\n        }\n        resolve(stdout);\n      });\n    });\n  }\n\n}\n\nmodule.exports = new bashTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "bash",
        "description": "Execute a bash command",
        "input_schema": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The bash command to execute"
            }
          },
          "required": [
            "command"
          ]
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.490Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/bash",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.490Z",
        "lastModifiedDate": "2024-06-27T23:38:32.490Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "wait_for_keypress",
      "version": "1.0.0",
      "description": "wait_for_keypress pauses execution until the user presses a key. Returns the key that was pressed and sets it to the resultVar if provided.",
      "source": "// This is javascript code for a tool module\nclass wait_for_keypressTool {\n\n  async execute({ resultVar }, api) {\n    const readline = require('readline');\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n    return new Promise((resolve) => {\n      rl.question('Press any key to continue...', (key) => {\n        rl.close();\n        if (resultVar) {\n          api.store[resultVar] = key;\n        }\n        resolve(key);\n      });\n    });\n  }\n\n}\n\nmodule.exports = new wait_for_keypressTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "wait_for_keypress",
        "description": "wait_for_keypress pauses execution until the user presses a key. Returns the key that was pressed and sets it to the resultVar if provided.",
        "methodSignature": "wait_for_keypress(resultVar?: string): string"
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.522Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/wait_for_keypress",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.522Z",
        "lastModifiedDate": "2024-06-27T23:38:32.522Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "utilities_parseEther",
      "version": "1.0.0",
      "description": "Convert a value from ether to wei.",
      "source": "// This is javascript code for a tool module\nclass utilities_parseEtherTool {\n\n  async execute(params, api) {\n    const { ether } = params;\n    api.debugLog(`utilities_parseEther called with ether: ${ether}`);\n    const weiValue = ethers.utils.parseEther(ether).toString();\n    api.debugLog(`Wei value: ${weiValue}`);\n    return weiValue;\n  }\n\n}\n\nmodule.exports = new utilities_parseEtherTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "utilities_parseEther",
        "description": "Convert a value from ether to wei.",
        "input_schema": {
          "type": "object",
          "properties": {
            "ether": {
              "type": "string",
              "description": "The value in ether."
            }
          },
          "required": [
            "ether"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The value in wei."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.542Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/utilities_parseEther",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.542Z",
        "lastModifiedDate": "2024-06-27T23:38:32.542Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "load_tool",
      "version": "1.0.0",
      "description": "Load a tool from a file path.",
      "source": "// This is javascript code for a tool module\nclass load_toolTool {\n\n  async execute({ path }, api) {\n    try {\n      const toolModule = require(path);\n      const toolName = toolModule.name;\n      api.toolRegistry.addTool(toolName, toolModule.source, toolModule.schema, toolModule.tags || []);\n      return toolName;\n    } catch (error) {\n      throw new Error(`Failed to load tool: ${error.message} Tool source: ${error.stack}`);\n    }\n  }\n\n}\n\nmodule.exports = new load_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "load_tool",
        "methodSignature": "load_tool(path: string): string",
        "description": "Load a tool from a file path."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.543Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/load_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.543Z",
        "lastModifiedDate": "2024-06-27T23:38:32.543Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tools_details",
      "version": "1.0.0",
      "description": "Get the details of the specified tools.",
      "source": "// This is javascript code for a tool module\nclass get_tools_detailsTool {\n\n  async execute(params, api) {\n    const { tools } = params;\n    const toolsDetails = await Promise.all(tools.map(async (tool) => {\n      return await api.callTool('get_tool_details', { tool });\n    }));\n    return toolsDetails;\n  }\n\n}\n\nmodule.exports = new get_tools_detailsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "get_tools_details",
        "methodSignature": "get_tools_details(tools: string[]): { name: 'string', description: 'string', input_schema: 'object', output_schema: 'object' }[]",
        "description": "Get the details of the specified tools."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.591Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tools_details",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.591Z",
        "lastModifiedDate": "2024-06-27T23:38:32.591Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "list_tools",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass list_toolsTool {\n\n  async execute(params, api) {\n    const allTools = await api.getToolList();\n    if (params.tags && params.tags.length > 0) {\n      return allTools.filter(tool => params.tags.every(tag => tool.tags.includes(tag)));\n    }\n    return allTools;\n  }\n\n}\n\nmodule.exports = new list_toolsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional tags to filter tools"
          }
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.593Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/list_tools",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.593Z",
        "lastModifiedDate": "2024-06-27T23:38:32.593Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "get_tool_details",
      "version": "1.0.0",
      "description": "Get the details of a tool.",
      "source": "// This is javascript code for a tool module\nclass get_tool_detailsTool {\n\n  async execute({ tool }, api) {\n    const toolsHome = await api.callTool('get_tools_home', {});\n    const toolPath = `${toolsHome}/${tool}.ts`;\n    const existsSync = require('fs').existsSync;\n    if (!existsSync(toolPath)) {\n      throw new Error(`The tool '${tool}' does not exist.`);\n    }\n    const toolModule = require(toolPath);\n    return toolModule.schema;\n  }\n\n}\n\nmodule.exports = new get_tool_detailsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "get_tool_details",
        "methodSignature": "get_tool_details(tool: string): { name: 'string', description: 'string', input_schema: 'object', output_schema: 'object' }",
        "description": "Get the details of a tool."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.611Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/get_tool_details",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.611Z",
        "lastModifiedDate": "2024-06-27T23:38:32.611Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "utilities_formatEther",
      "version": "1.0.0",
      "description": "Convert a value from wei to ether.",
      "source": "// This is javascript code for a tool module\nclass utilities_formatEtherTool {\n\n  async execute(params, api) {\n    const { wei } = params;\n    const { ethers, errorLogger_1 } = api;\n\n    errorLogger_1.debugLog(`utilities_formatEther called with wei: ${wei}`);\n    const etherValue = ethers.utils.formatEther(wei);\n    errorLogger_1.debugLog(`Ether value: ${etherValue}`);\n    return etherValue;\n  }\n\n}\n\nmodule.exports = new utilities_formatEtherTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "utilities_formatEther",
        "description": "Convert a value from wei to ether.",
        "input_schema": {
          "type": "object",
          "properties": {
            "wei": {
              "type": "string",
              "description": "The value in wei."
            }
          },
          "required": [
            "wei"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The value in ether."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.809Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/utilities_formatEther",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.809Z",
        "lastModifiedDate": "2024-06-27T23:38:32.809Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "save_tool",
      "version": "1.0.0",
      "description": "Save a tool to a file path.",
      "source": "// This is javascript code for a tool module\nclass save_toolTool {\n\n  async execute({ tool, path }, api) {\n    try {\n      const fs = require('fs').promises;\n      const name = Object.keys(tool)[0];\n      await fs.writeFile(path, `module.exports = ${JSON.stringify(tool, null, 2)};`);\n      return name;\n    } catch (error) {\n      throw new Error(`Failed to save tool: ${error.message} Tool source: ${error.stack}`);\n    }\n  }\n\n}\n\nmodule.exports = new save_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "save_tool",
        "methodSignature": "save_tool(params: { tool: object, path: string }): string",
        "description": "Save a tool to a file path."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:32.814Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/save_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:32.814Z",
        "lastModifiedDate": "2024-06-27T23:38:32.814Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "search_google",
      "version": "1.0.0",
      "description": "perform a google search using the given query",
      "source": "// This is javascript code for a tool module\nclass search_googleTool {\n\n  async execute(params, api) {\n    const config = {\n      GOOGLE_API_KEY: process.env.GOOGLE_API_KEY,\n      GOOGLE_CX_ID: process.env.GOOGLE_CX_ID\n    };\n    try {\n      const axios = require('axios');\n      const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=${config.GOOGLE_API_KEY}&cx=${config.GOOGLE_CX_ID}&q=${params.query}`);\n      const results = response.data.items.map((item) => ({\n        title: item.title,\n        link: item.link\n      }));\n      return JSON.stringify(results);\n    } catch (error) {\n      return error.message;\n    }\n  }\n\n}\n\nmodule.exports = new search_googleTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "search_google",
        "methodSignature": "search_google(params: { query: string }): string",
        "description": "perform a google search using the given query"
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.107Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/search_google",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.107Z",
        "lastModifiedDate": "2024-06-27T23:38:33.107Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "wallet_create",
      "version": "1.0.0",
      "description": "Create a new Ethereum wallet.",
      "source": "// This is javascript code for a tool module\nclass wallet_createTool {\n\n  async execute({ resultVar }, api) {\n    const { ethers } = require('ethers');\n    const { debugLog } = require('./errorLogger');\n\n    debugLog('wallet_create called');\n    const wallet = ethers.Wallet.createRandom();\n    debugLog(`Created new wallet with private key: ${wallet.privateKey}`);\n    if (resultVar) {\n      api.store[resultVar] = wallet.privateKey;\n      debugLog(`Stored private key in variable: ${resultVar}`);\n    }\n    return wallet.privateKey;\n  }\n\n}\n\nmodule.exports = new wallet_createTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "wallet_create",
        "description": "Create a new Ethereum wallet.",
        "input_schema": {
          "type": "object",
          "properties": {
            "resultVar": {
              "type": "string",
              "description": "Optional. The variable to store the patched content in."
            }
          },
          "required": []
        },
        "output_schema": {
          "type": "string",
          "description": "The private key of the newly created wallet."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.120Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/wallet_create",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.120Z",
        "lastModifiedDate": "2024-06-27T23:38:33.120Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "add_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass add_toolTool {\n\n  async execute(params, api) {\n    const { ScriptValidator } = require('./validator');\n    const { MetadataManager } = require('./metadataManager');\n\n    const isValid = await ScriptValidator.validate(params.source);\n    if (!isValid) {\n      throw new Error('Tool validation failed');\n    }\n\n    const success = await api.addTool(params.name, params.source, params.schema || {}, params.tags || []);\n    if (success) {\n      await MetadataManager.addMetadata(api, params.name, {\n        originalQuery: params.originalQuery || '',\n        creationDate: new Date(),\n        author: 'User',\n        version: '1.0.0',\n        tags: params.tags || [],\n        dependencies: []\n      });\n    }\n    return success;\n  }\n\n}\n\nmodule.exports = new add_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          },
          "source": {
            "type": "string",
            "description": "Source code of the tool"
          },
          "description": {
            "type": "string",
            "description": "Description of the tool"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for the tool"
          },
          "schema": {
            "type": "object",
            "description": "Schema for the tool"
          },
          "originalQuery": {
            "type": "string",
            "description": "Original query that led to the creation of this tool"
          }
        },
        "required": [
          "name",
          "source",
          "description"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.240Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/add_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.240Z",
        "lastModifiedDate": "2024-06-27T23:38:33.240Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "search_news_api",
      "version": "1.0.0",
      "description": "Performs a news search using the given query.",
      "source": "// This is javascript code for a tool module\nclass search_news_apiTool {\n\n  async execute(params, api) {\n    const axios = require('axios');\n    const trunc = (str, len) => {\n      return str.length > len ? str.substring(0, len - 3) + '...' : str;\n    };\n    try {\n      const response = await axios.get(`https://newsapi.org/v2/everything?q=${params.q}&apiKey=${process.env.NEWS_API_KEY}`);\n      const results = response.data.articles.map((item) => ({\n        content: trunc(item.content, 100),\n        title: item.title,\n        url: item.url,\n      }));\n      let num = params.num ? params.num : 10;\n      const res = results.slice(0, num);\n      return JSON.stringify(res);\n    } catch (error) {\n      return `Error calling News API: ${error.message}`;\n    }\n  }\n\n}\n\nmodule.exports = new search_news_apiTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "search_news_api",
        "methodSignature": "search_news_api(params: { q: string, from?: string, to?: string, language?: string, country?: string, domains?: string, sources?: string, sortBy?: string, num?: number }): string",
        "description": "Performs a news search using the given query."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.493Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/search_news_api",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.493Z",
        "lastModifiedDate": "2024-06-27T23:38:33.493Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "wallet_import",
      "version": "1.0.0",
      "description": "Import an Ethereum wallet from a private key.",
      "source": "// This is javascript code for a tool module\nclass wallet_importTool {\n\n  async execute({ privateKey, resultVar }, api) {\n    const { ethers } = require('ethers');\n    const { debugLog } = require('./errorLogger');\n\n    debugLog(`wallet_import called with privateKey: ${privateKey}`);\n    \n    if (!this.validatePrivateKey(privateKey)) {\n      throw new Error('Invalid private key');\n    }\n    \n    const wallet = new ethers.Wallet(privateKey);\n    debugLog(`Imported wallet with private key: ${wallet.privateKey}`);\n    \n    if (resultVar) {\n      api.store[resultVar] = wallet.privateKey;\n      debugLog(`Stored private key in variable: ${resultVar}`);\n    }\n    \n    return wallet.privateKey;\n  }\n\n  validatePrivateKey(privateKey) {\n    // Implement private key validation logic here\n    return /^0x[0-9a-fA-F]{64}$/.test(privateKey);\n  }\n\n}\n\nmodule.exports = new wallet_importTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "wallet_import",
        "description": "Import an Ethereum wallet from a private key.",
        "input_schema": {
          "type": "object",
          "properties": {
            "privateKey": {
              "type": "string",
              "description": "The private key of the wallet."
            },
            "resultVar": {
              "type": "string",
              "description": "Optional. The variable to store the patched content in."
            }
          },
          "required": [
            "privateKey"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The private key of the imported wallet."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.620Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/wallet_import",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.620Z",
        "lastModifiedDate": "2024-06-27T23:38:33.620Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "wallet_estimateGas",
      "version": "1.0.0",
      "description": "Estimate the gas cost of an Ethereum transaction.",
      "source": "// This is javascript code for a tool module\nclass wallet_estimateGasTool {\n\n  async execute(params, api) {\n    const { transaction, provider } = params;\n    const { debugLog } = api.errorLogger;\n\n    debugLog(`wallet_estimateGas called with transaction: ${JSON.stringify(transaction)}, provider: ${provider}`);\n    \n    if (!this.validateTransaction(transaction)) {\n      throw new Error('Invalid transaction object');\n    }\n\n    debugLog(`Estimating gas for transaction: ${JSON.stringify(transaction)} on provider: ${provider}`);\n    \n    const ethers = api.ethers;\n    const gasEstimate = await new ethers.providers.JsonRpcProvider(provider).estimateGas(transaction);\n    \n    debugLog(`Gas estimate: ${gasEstimate.toString()}`);\n    \n    return gasEstimate.toString();\n  }\n\n  validateTransaction(transaction) {\n    return transaction && transaction.to && transaction.value;\n  }\n\n}\n\nmodule.exports = new wallet_estimateGasTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "wallet_estimateGas",
        "description": "Estimate the gas cost of an Ethereum transaction.",
        "input_schema": {
          "type": "object",
          "properties": {
            "transaction": {
              "type": "object",
              "properties": {
                "to": {
                  "type": "string",
                  "description": "The address of the recipient."
                },
                "value": {
                  "type": "string",
                  "description": "The amount to send in wei."
                },
                "data": {
                  "type": "string",
                  "description": "Optional. The data for the transaction."
                }
              },
              "required": [
                "to",
                "value"
              ]
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            }
          },
          "required": [
            "transaction",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The estimated gas cost."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.630Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/wallet_estimateGas",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.630Z",
        "lastModifiedDate": "2024-06-27T23:38:33.630Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "add_tool",
      "version": "1.0.0",
      "source": "// This is javascript code for a tool module\nclass add_toolTool {\n\n  async execute(params, api) {\n    const { ScriptValidator } = require('./validator');\n    const { MetadataManager } = require('./metadataManager');\n\n    const isValid = await ScriptValidator.validate(params.source);\n    if (!isValid) {\n      throw new Error('Tool validation failed');\n    }\n\n    const success = await api.addTool(params.name, params.source, params.schema || {}, params.tags || []);\n    if (success) {\n      await MetadataManager.addMetadata(api, params.name, {\n        originalQuery: params.originalQuery || '',\n        creationDate: new Date(),\n        author: 'User',\n        version: '1.0.0',\n        tags: params.tags || [],\n        dependencies: []\n      });\n    }\n    return success;\n  }\n\n}\n\nmodule.exports = new add_toolTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          },
          "source": {
            "type": "string",
            "description": "Source code of the tool"
          },
          "description": {
            "type": "string",
            "description": "Description of the tool"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for the tool"
          },
          "schema": {
            "type": "object",
            "description": "Schema for the tool"
          },
          "originalQuery": {
            "type": "string",
            "description": "Original query that led to the creation of this tool"
          }
        },
        "required": [
          "name",
          "source",
          "description"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.639Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/add_tool",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.639Z",
        "lastModifiedDate": "2024-06-27T23:38:33.639Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "contract_call",
      "version": "1.0.0",
      "description": "Call a method of an Ethereum smart contract.",
      "source": "// This is javascript code for a tool module\nclass contract_callTool {\n\n  async execute(params, api) {\n    const { contractAddress, abi, methodName, args, provider } = params;\n    const { ethers, validateAddress, validateABI, debugLog } = api;\n\n    debugLog(`contract_call called with contractAddress: ${contractAddress}, abi: ${abi}, methodName: ${methodName}, args: ${JSON.stringify(args)}, provider: ${provider}`);\n\n    if (!validateAddress(contractAddress)) {\n      throw new Error('Invalid Ethereum address');\n    }\n\n    const parsedAbi = JSON.parse(abi);\n    if (!validateABI(parsedAbi)) {\n      throw new Error('Invalid ABI format');\n    }\n\n    debugLog(`Calling contract method: ${methodName} with args: ${JSON.stringify(args)} on provider: ${provider}`);\n\n    const contract = new ethers.Contract(contractAddress, parsedAbi, new ethers.providers.JsonRpcProvider(provider));\n    const result = await contract[methodName](...(args || []));\n\n    debugLog(`Method call result: ${result.toString()}`);\n    return result.toString();\n  }\n\n}\n\nmodule.exports = new contract_callTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "contract_call",
        "description": "Call a method of an Ethereum smart contract.",
        "input_schema": {
          "type": "object",
          "properties": {
            "contractAddress": {
              "type": "string",
              "description": "The address of the contract."
            },
            "abi": {
              "type": "string",
              "description": "The ABI of the contract, as a JSON string."
            },
            "methodName": {
              "type": "string",
              "description": "The name of the method to call."
            },
            "args": {
              "type": "array",
              "description": "The arguments for the method."
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            }
          },
          "required": [
            "contractAddress",
            "abi",
            "methodName",
            "args",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The result of the method call."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.643Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/contract_call",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.643Z",
        "lastModifiedDate": "2024-06-27T23:38:33.643Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "fixJson",
      "version": "1.0.0",
      "description": "given some text content with some JSON within it, it will extract the JSON and return a syntactically correct JSON object/array, given some text content without any JSON within it, it will attempt to structure the text content into a JSON object",
      "source": "// This is javascript code for a tool module\nclass fixJsonTool {\n\n  async execute({ json, resultVar }, api) {\n    const convo = new api.conversation('gemini');\n    const sp = `Given some content that contains a JSON object or array, you ignore EVERYTHING BEFORE OR AFTER what is obviously JSON data, ignoring funky keys and weird data, and you output a syntactically-valid version of the JSON, with other quoting characters properly escaped, on a single line. If the content contains no JSON data, you output a JSON object containing the input data, structured in the most appropriate manner for the data.`;\n    const tasks = await convo.chat([\n      {\n        role: 'system',\n        content: sp\n      },\n      {\n        role: 'user',\n        content: json,\n      },\n    ], {}, 'gemini-1.5-flash-001');\n    let task = tasks.content[0].text;\n    try {\n      task = JSON.parse(task);\n    } catch (error) {\n      task = api.extractJson(task);\n    }\n    if (resultVar) {\n      api.store[resultVar] = task;\n    }\n    return task;\n  }\n\n}\n\nmodule.exports = new fixJsonTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "fixJson",
        "methodSignature": "fixJson(params: { json: string, resultVar?: string }): any",
        "description": "given some text content with some JSON within it, it will extract the JSON and return a syntactically correct JSON object/array, given some text content without any JSON within it, it will attempt to structure the text content into a JSON object"
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.764Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/fixJson",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.764Z",
        "lastModifiedDate": "2024-06-27T23:38:33.764Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "wallet_sendTransaction",
      "version": "1.0.0",
      "description": "Send a transaction from an Ethereum wallet.",
      "source": "// This is javascript code for a tool module\nclass wallet_sendTransactionTool {\n\n  async execute(params, api) {\n    const { privateKey, transaction, provider } = params;\n    const { debugLog } = api.errorLogger;\n\n    debugLog(`wallet_sendTransaction called with privateKey: ${privateKey}, transaction: ${JSON.stringify(transaction)}, provider: ${provider}`);\n\n    if (!this.validatePrivateKey(privateKey)) {\n      throw new Error('Invalid private key');\n    }\n\n    if (!this.validateTransaction(transaction)) {\n      throw new Error('Invalid transaction object');\n    }\n\n    debugLog(`Sending transaction from wallet with private key: ${privateKey} to provider: ${provider}`);\n\n    const wallet = new api.ethers.Wallet(privateKey, new api.ethers.providers.JsonRpcProvider(provider));\n    const tx = await wallet.sendTransaction(transaction);\n\n    debugLog(`Transaction hash: ${tx.hash}`);\n    return tx.hash;\n  }\n\n  validatePrivateKey(privateKey) {\n    // Implement private key validation logic here\n    return true;\n  }\n\n  validateTransaction(transaction) {\n    // Implement transaction validation logic here\n    return true;\n  }\n\n}\n\nmodule.exports = new wallet_sendTransactionTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "wallet_sendTransaction",
        "description": "Send a transaction from an Ethereum wallet.",
        "input_schema": {
          "type": "object",
          "properties": {
            "privateKey": {
              "type": "string",
              "description": "The private key of the wallet."
            },
            "transaction": {
              "type": "object",
              "properties": {
                "to": {
                  "type": "string",
                  "description": "The address of the recipient."
                },
                "value": {
                  "type": "string",
                  "description": "The amount to send in wei."
                },
                "gasLimit": {
                  "type": "string",
                  "description": "Optional. The gas limit for the transaction."
                },
                "nonce": {
                  "type": "number",
                  "description": "Optional. The nonce for the transaction."
                }
              },
              "required": [
                "to",
                "value"
              ]
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            }
          },
          "required": [
            "privateKey",
            "transaction",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The transaction hash."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:33.995Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/wallet_sendTransaction",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:33.995Z",
        "lastModifiedDate": "2024-06-27T23:38:33.995Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "call_agents",
      "version": "1.0.0",
      "description": "Call multiple agents with the given tasks to perform.",
      "source": "// This is javascript code for a tool module\nclass call_agentsTool {\n\n  async execute({ prompts, resultVar }, api) {\n    try {\n      if (!prompts || !Array.isArray(prompts)) {\n        throw new Error(\"The 'prompts' parameter must be an array for the 'call_agents' tool.\");\n      }\n      const results = await Promise.all(prompts.map(async (prompt) => {\n        return await api.callTool('call_agent', { prompt, model: 'claude' });\n      }));\n      if (resultVar) {\n        api.store[resultVar] = results;\n      }\n      return results;\n    } catch (error) {\n      let llmResponse = await api.conversation.chat([\n        {\n          role: 'system',\n          content: 'Analyze the provided error details and generate a fix or provide guidance on resolving the issue.',\n        },\n        {\n          role: 'user',\n          content: JSON.stringify({\n            error: error.message,\n            stackTrace: error.stack,\n            context: { prompts, resultVar },\n          }),\n        },\n      ]);\n      llmResponse = llmResponse.content[0].text.trim();\n      if (llmResponse.fix) {\n        return llmResponse.fix;\n      }\n      throw error;\n    }\n  }\n\n}\n\nmodule.exports = new call_agentsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "call_agents",
        "methodSignature": "call_agents(params: { prompts: string[], resultVar?: string }): any",
        "description": "Call multiple agents with the given tasks to perform."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:34.094Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/call_agents",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:34.094Z",
        "lastModifiedDate": "2024-06-27T23:38:34.094Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "contract_events",
      "version": "1.0.0",
      "description": "Get events emitted by an Ethereum smart contract.",
      "source": "// This is javascript code for a tool module\nclass contract_eventsTool {\n\n  async execute(params, api) {\n    const { contractAddress, abi, eventName, filters, provider } = params;\n    const { ethers, validateAddress, validateABI, debugLog } = api;\n\n    debugLog(`contract_events called with contractAddress: ${contractAddress}, abi: ${abi}, eventName: ${eventName}, filters: ${JSON.stringify(filters)}, provider: ${provider}`);\n    \n    if (!validateAddress(contractAddress)) {\n      throw new Error('Invalid Ethereum address');\n    }\n    \n    const parsedAbi = JSON.parse(abi);\n    if (!validateABI(parsedAbi)) {\n      throw new Error('Invalid ABI format');\n    }\n    \n    debugLog(`Getting events for contract: ${contractAddress}, event: ${eventName}, filters: ${JSON.stringify(filters)} from provider: ${provider}`);\n    \n    const contract = new ethers.Contract(contractAddress, parsedAbi, new ethers.providers.JsonRpcProvider(provider));\n    const events = await contract.queryFilter(contract.filters[eventName](), filters);\n    \n    debugLog(`Events: ${JSON.stringify(events)}`);\n    \n    return JSON.stringify(events.map((event) => event.args));\n  }\n\n}\n\nmodule.exports = new contract_eventsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "contract_events",
        "description": "Get events emitted by an Ethereum smart contract.",
        "input_schema": {
          "type": "object",
          "properties": {
            "contractAddress": {
              "type": "string",
              "description": "The address of the contract."
            },
            "abi": {
              "type": "string",
              "description": "The ABI of the contract, as a JSON string."
            },
            "eventName": {
              "type": "string",
              "description": "The name of the event to listen for."
            },
            "filters": {
              "type": "object",
              "description": "The filters to apply to the event."
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            }
          },
          "required": [
            "contractAddress",
            "abi",
            "eventName",
            "filters",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "A JSON stringified array of event data."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:34.123Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/contract_events",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:34.123Z",
        "lastModifiedDate": "2024-06-27T23:38:34.123Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "wallet_balance",
      "version": "1.0.0",
      "description": "Get the balance of an Ethereum wallet.",
      "source": "// This is javascript code for a tool module\nclass wallet_balanceTool {\n\n  async execute({ address, provider, resultVar }, api) {\n    const { ethers } = require('ethers');\n    const { debugLog } = require('./errorLogger');\n\n    debugLog(`wallet_balance called with address: ${address}, provider: ${provider}`);\n    if (!this.validateAddress(address)) {\n      throw new Error('Invalid Ethereum address');\n    }\n    debugLog(`Getting balance for address: ${address} from provider: ${provider}`);\n    const balance = await new ethers.providers.JsonRpcProvider(provider).getBalance(address);\n    debugLog(`Balance: ${balance}`);\n    if (resultVar) {\n      api.store[resultVar] = ethers.utils.formatEther(balance);\n      debugLog(`Stored balance in variable: ${resultVar}`);\n    }\n    return ethers.utils.formatEther(balance);\n  }\n\n  validateAddress(address) {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n  }\n\n}\n\nmodule.exports = new wallet_balanceTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "wallet_balance",
        "description": "Get the balance of an Ethereum wallet.",
        "input_schema": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The address of the wallet."
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            },
            "resultVar": {
              "type": "string",
              "description": "Optional. The variable to store the patched content in."
            }
          },
          "required": [
            "address",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The balance of the wallet in ether."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:34.145Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/wallet_balance",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:34.145Z",
        "lastModifiedDate": "2024-06-27T23:38:34.145Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "contract_deploy",
      "version": "1.0.0",
      "description": "Deploy an Ethereum smart contract.",
      "source": "// This is javascript code for a tool module\nclass contract_deployTool {\n\n  async execute(params, api) {\n    const { privateKey, abi, bytecode, args, provider } = params;\n    api.debugLog(`contract_deploy called with privateKey: ${privateKey}, abi: ${abi}, bytecode: ${bytecode}, args: ${JSON.stringify(args)}, provider: ${provider}`);\n    \n    if (!this.validatePrivateKey(privateKey)) {\n      throw new Error('Invalid private key');\n    }\n    \n    const parsedAbi = JSON.parse(abi);\n    if (!this.validateABI(parsedAbi)) {\n      throw new Error('Invalid ABI format');\n    }\n    \n    api.debugLog(`Deploying contract with ABI: ${JSON.stringify(parsedAbi)} and bytecode: ${bytecode} to provider: ${provider}`);\n    \n    const wallet = new api.ethers.Wallet(privateKey, new api.ethers.providers.JsonRpcProvider(provider));\n    const factory = new api.ethers.ContractFactory(parsedAbi, bytecode, wallet);\n    const contract = await factory.deploy(...(args || []));\n    await contract.deployed();\n    \n    api.debugLog(`Contract deployed at address: ${contract.address}`);\n    return contract.address;\n  }\n\n  validatePrivateKey(privateKey) {\n    // Implement private key validation logic here\n    return true;\n  }\n\n  validateABI(abi) {\n    // Implement ABI validation logic here\n    return true;\n  }\n\n}\n\nmodule.exports = new contract_deployTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "contract_deploy",
        "description": "Deploy an Ethereum smart contract.",
        "input_schema": {
          "type": "object",
          "properties": {
            "privateKey": {
              "type": "string",
              "description": "The private key of the wallet."
            },
            "abi": {
              "type": "string",
              "description": "The ABI of the contract, as a JSON string."
            },
            "bytecode": {
              "type": "string",
              "description": "The bytecode of the contract."
            },
            "args": {
              "type": "array",
              "description": "The arguments for the contract constructor."
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            }
          },
          "required": [
            "privateKey",
            "abi",
            "bytecode",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The address of the deployed contract."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:34.588Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/contract_deploy",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:34.588Z",
        "lastModifiedDate": "2024-06-27T23:38:34.588Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "contract_interact",
      "version": "1.0.0",
      "description": "Interact with an Ethereum smart contract.",
      "source": "// This is javascript code for a tool module\nclass contract_interactTool {\n\n  async execute(params, api) {\n    const { privateKey, contractAddress, abi, methodName, args, provider } = params;\n    const { ethers, errorLogger, validatePrivateKey, validateAddress, validateABI } = api;\n\n    errorLogger.debugLog(`contract_interact called with privateKey: ${privateKey}, contractAddress: ${contractAddress}, abi: ${abi}, methodName: ${methodName}, args: ${JSON.stringify(args)}, provider: ${provider}`);\n\n    if (!validatePrivateKey(privateKey)) {\n      throw new Error('Invalid private key');\n    }\n\n    if (!validateAddress(contractAddress)) {\n      throw new Error('Invalid Ethereum address');\n    }\n\n    const parsedAbi = JSON.parse(abi);\n    if (!validateABI(parsedAbi)) {\n      throw new Error('Invalid ABI format');\n    }\n\n    errorLogger.debugLog(`Interacting with contract at address: ${contractAddress} with method: ${methodName} and args: ${JSON.stringify(args)} on provider: ${provider}`);\n\n    const wallet = new ethers.Wallet(privateKey, new ethers.providers.JsonRpcProvider(provider));\n    const contract = new ethers.Contract(contractAddress, parsedAbi, wallet);\n    const result = await contract[methodName](...(args || []));\n\n    errorLogger.debugLog(`Method call result: ${result.toString()}`);\n    return result.toString();\n  }\n\n}\n\nmodule.exports = new contract_interactTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "contract_interact",
        "description": "Interact with an Ethereum smart contract.",
        "input_schema": {
          "type": "object",
          "properties": {
            "privateKey": {
              "type": "string",
              "description": "The private key of the wallet."
            },
            "contractAddress": {
              "type": "string",
              "description": "The address of the contract."
            },
            "abi": {
              "type": "string",
              "description": "The ABI of the contract, as a JSON string."
            },
            "methodName": {
              "type": "string",
              "description": "The name of the method to call."
            },
            "args": {
              "type": "array",
              "description": "The arguments for the method."
            },
            "provider": {
              "type": "string",
              "description": "The provider URL."
            }
          },
          "required": [
            "privateKey",
            "contractAddress",
            "abi",
            "methodName",
            "args",
            "provider"
          ]
        },
        "output_schema": {
          "type": "string",
          "description": "The result of the method call."
        }
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:34.629Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/contract_interact",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:34.629Z",
        "lastModifiedDate": "2024-06-27T23:38:34.629Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "callLLMs",
      "version": "1.0.0",
      "description": "Call the LLM with the given system prompt and prompts concurrently.",
      "source": "// This is javascript code for a tool module\nclass callLLMsTool {\n\n  async execute({ prompts, system_prompt, resultVar }, api) {\n    try {\n      if (!prompts || !Array.isArray(prompts) || !system_prompt) {\n        throw new Error(\"The 'prompts' parameter must be an array and 'system_prompt' is required for the 'callLLMs' tool.\");\n      }\n      const results = await Promise.all(prompts.map(async (prompt) => {\n        return await api.conversation.chat([\n          {\n            role: 'system',\n            content: system_prompt,\n          },\n          {\n            role: 'user',\n            content: prompt,\n          },\n        ]);\n      }));\n      if (resultVar) {\n        api.store[resultVar] = results;\n      }\n      return results;\n    } catch (error) {\n      let llmResponse = await api.conversation.chat([\n        {\n          role: 'system',\n          content: 'Analyze the provided error details and generate a fix or provide guidance on resolving the issue.',\n        },\n        {\n          role: 'user',\n          content: JSON.stringify({\n            error: error.message,\n            stackTrace: error.stack,\n            context: { prompts, system_prompt, resultVar },\n          }),\n        },\n      ]);\n      llmResponse = llmResponse.content[0].text.trim();\n      if (llmResponse.fix) {\n        return llmResponse.fix;\n      }\n      throw error;\n    }\n  }\n\n}\n\nmodule.exports = new callLLMsTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "callLLMs",
        "methodSignature": "callLLMs(params: { prompts: string[], system_prompt: string, resultVar?: string }): any",
        "description": "Call the LLM with the given system prompt and prompts concurrently."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:34.632Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/callLLMs",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:34.632Z",
        "lastModifiedDate": "2024-06-27T23:38:34.632Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "generate_patches",
      "version": "1.0.0",
      "description": "Generate a number of patches for a number of files given a list of file paths and instructions for what to generate. Use this tool to make changes to one or more files given a set of instructions.",
      "source": "// This is javascript code for a tool module\nclass generate_patchesTool {\n\n  async execute({ files, instructions, resultVar }, api) {\n    try {\n      const content = files\n        .map((file) => {\n          return [file, api.fs.readFileSync(file).toString()].join('\\n');\n        })\n        .join('\\n\\n');\n      const prompt = `INSTRUCTIONS: ${instructions}\\n\\nFILES:\\n\\n${content}\\n\\nRemember to provide a JSON array of objects with the following format: [{ file: <file>, patch: <patch> }].`;\n      let llmResponse = await api.conversation.chat([\n        {\n          role: 'system',\n          content: 'Analyze the provided files, then analyse the instructions. Then, generate one or more patches for the files based on the given instructions. Return your patches as a JSON array of objects with the following format: [{ file: <file>, patch: <patch> }]. OUTPUT ONLY RAW JSON!',\n        },\n        {\n          role: 'user',\n          content: prompt,\n        },\n      ]);\n      llmResponse = llmResponse.content[0].text.trim();\n      if (resultVar) {\n        api.store[resultVar] = llmResponse;\n      }\n      return llmResponse;\n    } catch (error) {\n      let llmResponse = await api.conversation.chat([\n        {\n          role: 'system',\n          content: 'Analyze the provided error details and generate a fix or provide guidance on resolving the issue.',\n        },\n        {\n          role: 'user',\n          content: JSON.stringify({\n            error: error.message,\n            stackTrace: error.stack,\n            context: { files, instructions },\n          }),\n        },\n      ]);\n      llmResponse = llmResponse.content[0].text.trim();\n      if (llmResponse.fix) {\n        return llmResponse.fix;\n      }\n      throw new Error(llmResponse);\n    }\n  }\n\n}\n\nmodule.exports = new generate_patchesTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "generate_patches",
        "methodSignature": "generate_patches(params: { files: string[], instructions: string, resultVar?: string }): string",
        "description": "Generate a number of patches for a number of files given a list of file paths and instructions for what to generate. Use this tool to make changes to one or more files given a set of instructions."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:35.331Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/generate_patches",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:35.331Z",
        "lastModifiedDate": "2024-06-27T23:38:35.331Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "apply_patch",
      "version": "1.0.0",
      "description": "Apply a universal patch to a file. Pass a file path, a patch string, and an optional resultVar to save the patched file contents.",
      "source": "// This is javascript code for a tool module\nclass apply_patchTool {\n\n  async execute(params, api) {\n    if (!Array.isArray(params))\n      params = [params];\n    for (const { file, patch, resultVar } of params) {\n      try {\n        if (!file || !patch) {\n          throw new Error(\"Both 'file' and 'patch' are required parameters for the 'apply_patch' tool.\");\n        }\n        const existsSync = require('fs').existsSync;\n        const filePath = require('path').resolve(file);\n        if (!(await existsSync(filePath))) {\n          throw new Error(`The file '${file}' does not exist.`);\n        }\n        try {\n          const result = await api.callTool('busybox', {\n            command: 'patch',\n            args: [file],\n            options: { input: patch },\n            resultVar,\n          });\n          if (resultVar) {\n            api.store[resultVar] = result;\n          }\n          return result;\n        } catch (error) {\n          try {\n            const fs = require('fs').promises;\n            const fileContent = await fs.readFile(file, 'utf8');\n            const results = await api.conversation.chat([\n              {\n                role: 'system',\n                content: 'Given one or more universal patches and file content, analyze the patches and the file content to determine the best way to apply the patch to the content, then apply the patch to the file. Return ONLY the patched file contents IN ITS ENTIRETY.',\n              },\n              {\n                role: 'user',\n                content: `File content: ${fileContent}\\n\\nPatch: ${patch}`,\n              },\n            ]);\n            return results.content[0].text;\n          } catch (error) {\n            throw new Error(`Failed to apply patch: ${error.message} Tool source: ${error.stack}`);\n          }\n        }\n      } catch (error) {\n        let llmResponse = await api.conversation.chat([\n          {\n            role: 'system',\n            content: 'Analyze the provided error details and generate a fix or provide guidance on resolving the issue.',\n          },\n          {\n            role: 'user',\n            content: JSON.stringify({\n              error: error.message,\n              stackTrace: error.stack,\n              context: { file, patch, resultVar },\n            }),\n          },\n        ]);\n        llmResponse = llmResponse.content[0].text.trim();\n        throw new Error(llmResponse);\n      }\n    }\n  }\n\n}\n\nmodule.exports = new apply_patchTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "apply_patch",
        "methodSignature": "apply_patch({ file: string, patch: string, resultVar?: string }): string",
        "description": "Apply a universal patch to a file. Pass a file path, a patch string, and an optional resultVar to save the patched file contents.",
        "required": [
          "file",
          "patch"
        ]
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:36.614Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/apply_patch",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:36.614Z",
        "lastModifiedDate": "2024-06-27T23:38:36.614Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "callLLM",
      "version": "1.0.0",
      "description": "Call the LLM with the given system prompt and prompt, optionally specifying the model and response format and setting a result variable.",
      "source": "// This is javascript code for a tool module\nclass callLLMTool {\n\n  async execute(params, api) {\n    if (!Array.isArray(params))\n      params = [params];\n    for (const param of params) {\n      let { prompt, system_prompt, model, responseFormat, resultVar } = param;\n      try {\n        if (!prompt) {\n          throw new Error(\"Both 'prompt' and 'system_prompt' are required parameters for the 'callLLM' tool.\");\n        }\n        if (!system_prompt)\n          system_prompt = prompt;\n        model = model || 'claude';\n        if (model !== 'claude' && model !== 'gemini') {\n          throw new Error(\"Invalid model specified. Choose either 'claude' or 'gemini'.\");\n        }\n        if (responseFormat) {\n          system_prompt = `${system_prompt}. Response Format: You MUST respond with a JSON - encoded string in the following format: \\n\\`\\`\\`typescript\\n${responseFormat}\\n\\`\\`\\`\\n`;\n        }\n        const convo = new api.conversation(model);\n        const response = await convo.chat([\n          {\n            role: 'system',\n            content: system_prompt,\n          },\n          {\n            role: 'user',\n            content: prompt,\n          },\n        ]);\n        const data = response.content[0].text.trim();\n        if (responseFormat) {\n          try {\n            const isValidJson = api.jsonValidator(responseFormat, data);\n            if (!isValidJson) {\n              throw new Error('Invalid JSON structure in LLM response. Actual response: ' + data + ' Expected response format: ' + responseFormat);\n            }\n            const rr = JSON.parse(data);\n            if (resultVar) {\n              api.store[resultVar] = rr;\n            }\n            return rr;\n          } catch (error) {\n            api.emit('error', `JSON parsing failed for LLM response: ${data}`);\n            if (resultVar) {\n              api.store[resultVar] = data;\n            }\n            return data;\n          }\n        } else {\n          if (resultVar) {\n            api.store[resultVar] = data;\n          }\n          return data;\n        }\n      } catch (error) {\n        let llmResponse = await api.conversation.chat([\n          {\n            role: 'system',\n            content: 'Analyze the provided error details and generate a fix or provide guidance on resolving the issue.',\n          },\n          {\n            role: 'user',\n            content: JSON.stringify({\n              error: error.message,\n              stackTrace: error.stack,\n              context: { prompt, system_prompt, model, responseFormat, resultVar },\n            }),\n          },\n        ]);\n        llmResponse = llmResponse.content[0].text.trim();\n        throw error;\n      }\n    }\n  }\n\n}\n\nmodule.exports = new callLLMTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "callLLM",
        "methodSignature": "callLLM(params: { prompt: string, system_prompt?: string, model?: string, responseFormat?: string, resultVar?: string }[]): any",
        "description": "Call the LLM with the given system prompt and prompt, optionally specifying the model and response format and setting a result variable."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:37.639Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/callLLM",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:37.639Z",
        "lastModifiedDate": "2024-06-27T23:38:37.639Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "say_aloud",
      "version": "1.0.0",
      "description": "Speaks the given text aloud using PlayHT. PASS IN A text and voice PARAMETERS TO SPEAK ALOUD. voice can be either 'male' or 'female'.",
      "source": "// This is javascript code for a tool module\nclass say_aloudTool {\n\n  async execute(params, api) {\n    const PlayHT = require('playht');\n    const fs = require('fs');\n    var player = require('play-sound')({});\n    const apiKey = process.env.PLAYHT_AUTHORIZATION;\n    const userId = process.env.PLAYHT_USER_ID;\n    const maleVoice = process.env.PLAYHT_MALE_VOICE;\n    const femaleVoice = process.env.PLAYHT_FEMALE_VOICE;\n\n    PlayHT.init({\n      apiKey: apiKey,\n      userId: userId,\n    });\n\n    function getNonce() {\n      return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n\n    async function speakSentence(sentence, voice) {\n      if (!sentence) return;\n      const stream = await PlayHT.stream(sentence, {\n        voiceEngine: 'PlayHT2.0-turbo',\n        voiceId: voice === 'male' ? maleVoice : femaleVoice,\n      });\n      const chunks = [];\n      stream.on('data', (chunk) => chunks.push(chunk));\n      return new Promise((resolve, reject) => {\n        stream.on('end', () => {\n          const buf = Buffer.concat(chunks);\n          const filename = `${getNonce()}.mp3`;\n          fs.writeFileSync(filename, buf);\n          player.play(filename, function (err) {\n            fs.unlinkSync(filename);\n            resolve('done');\n          });\n        });\n      });\n    }\n\n    if (!Array.isArray(params)) params = [params];\n\n    for (const param of params) {\n      let { text, voice } = param;\n      voice = voice || 'female';\n      if (!text) throw new Error('Text is required to speak aloud');\n      if (!voice) throw new Error('Voice is required to speak aloud');\n\n      let sentences = await api.conversation.chat([\n        {\n          role: 'system',\n          content: 'Convert the given text into a number of sentences meant to be spoken aloud. This means breaking the text into sentences that are easy to read and understand as well as phonetically pronouncing any difficult words, urls, or acronyms.*** Return your response as a RAW JSON ARRAY of strings. ***',\n        },\n        {\n          role: 'user',\n          content: text + '\\n\\n*** Return your response as a RAW JSON ARRAY of strings. ***',\n        },\n      ]);\n\n      sentences = sentences.content[0].text;\n      sentences = sentences instanceof Array ? sentences : JSON.parse(sentences);\n\n      const consumeSentence = async () => {\n        return new Promise((resolve, reject) => {\n          const loop = async () => {\n            const sentence = sentences.shift();\n            if (!sentence) return resolve('done');\n            await speakSentence(sentence, voice);\n            return await loop();\n          };\n          return loop();\n        });\n      };\n\n      await consumeSentence();\n    }\n\n    return '(aloud) ' + text;\n  }\n\n}\n\nmodule.exports = new say_aloudTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "say_aloud",
        "description": "Speaks the given text aloud using PlayHT. PASS IN A text and voice PARAMETERS TO SPEAK ALOUD. voice can be either 'male' or 'female'.",
        "methodSignature": "say_aloud({text, voice}:{string, string}): string"
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:38.294Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/say_aloud",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:38.294Z",
        "lastModifiedDate": "2024-06-27T23:38:38.294Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    },
    {
      "_events": {},
      "_eventsCount": 0,
      "name": "call_agent",
      "version": "1.0.0",
      "description": "Call the agent with the given task to perform.",
      "source": "// This is javascript code for a tool module\nclass call_agentTool {\n\n  async execute({ prompt, model = 'claude', resultVar }, api) {\n    try {\n      if (!prompt) {\n        throw new Error(\"The 'prompt' parameter is required for the 'call_agent' tool.\");\n      }\n      if (model !== 'claude' && model !== 'gemini') {\n        throw new Error(\"Invalid model specified. Choose either 'claude' or 'gemini'.\");\n      }\n      const compactRepresentation = () => {\n        return JSON.stringify(api.getSchemas());\n      };\n      const convo = new api.conversation(model);\n      const jsonPrompt = `Transform the given task into a sequence of subtasks, each with a JavaScript script that uses the provided tools to achieve the subtask objective.\n\nAvailable Tools:\n\n${compactRepresentation()}\n\nAdditional tools can be explored using 'list_all_tools', 'get_tool_details', and 'load_tool'.\n\nProcess:\n\n1. Analyze the task and identify necessary steps\n2. Decompose into subtasks with clear objectives and input/output\n3. For each subtask, write a JavaScript script using the tools\n  a. Access previous subtask results with taskResults.<taskName>_results: \\`const lastResult = taskResults.firstTask_results; ...\\`\n  b. Store subtask results in a variable for future use: \\`const result = { key: 'value' }; taskResults.subtask_results = result; ...\\`\n  b. End the script with a return statement for the subtask deliverable: \\`return result;\\`\n4. Test each script and verify the output\n5. Provide a concise explanation of the subtask's purpose and approach\n\nData Management:\n\n- Store subtask results in resultVar (JSON/array format): \\`taskResults.subtask_results = result;\\`\nAccess previous subtask data with taskResults.<resultVar>: \\`const lastResult = taskResults.subtask_results; ...\\`\nInclude only resultVar instructions in responses, not the actual data.\n\nOutput Format:\n\\`\\`\\`json\n[\n  {\n  \"task\": \"<taskName>:<description>\",\n  \"script\": \"<JavaScript script>\",\n  \"chat\": \"<subtask explanation>\",\n  \"resultVar\": \"<optional result variable>\"\n  },\n  // ... additional subtasks\n]\n\\`\\`\\`\n\nCRITICAL: Verify the JSON output for accuracy and completeness before submission. *** OUTPUT ONLY JSON ***`;\n      const response = await convo.chat([\n        {\n          role: 'system',\n          content: jsonPrompt,\n        },\n        {\n          role: 'user',\n          content: JSON.stringify({\n            task: 'First off: OUTPUTTING ONLY *VALID*, RAW JSON IS CRITICAL! Now read and handle this: ' + prompt,\n          }),\n        },\n      ]);\n      let tasks = response.content[0].text;\n      tasks = tasks.replace(/.*```json/g, '');\n      tasks = tasks.replace(/.*```/g, '');\n      tasks = tasks.replace(/[\\r\\n]+/g, '');\n      let message = '';\n      try {\n        tasks = JSON.parse(tasks);\n      } catch (error) {\n        tasks = api.extractJson(response.content[0].text);\n        message = error.message;\n      }\n      if (!Array.isArray(tasks) || tasks.length === 0) {\n        api.emit('error', message);\n        throw new Error('The task must be an array of subtasks. Check the format and try again. RETURN ONLY JSON RESPONSES' + message);\n      }\n      const results = [];\n      api.store[prompt] = tasks;\n      if (resultVar) {\n        api.store[resultVar] = results;\n      }\n      for (const task of tasks) {\n        let { task: taskName, script, chat } = task;\n        const splitTask = taskName.split(':');\n        let taskId = taskName;\n        if (splitTask.length > 1) {\n          taskId = splitTask[0];\n          taskName = splitTask[1];\n        }\n        api.store['currentTaskId'] = taskId;\n        api.emit('taskId', taskId);\n        api.store[`${taskId}_task`] = task;\n        api.emit(`${taskId}_task`, task);\n        api.store[`${taskId}_chat`] = chat;\n        api.emit(`${taskId}_chat`, chat);\n        api.store[`${taskId}_script`] = script;\n        api.emit(`${taskId}_script`, script);\n        const sr = await api.callScript(script);\n        task.scriptResult = sr;\n        api.store[`${taskId}_result`] = sr;\n        api.store[`${taskId}_results`] = sr;\n        const rout = { id: taskId, task: taskName, script, result: sr };\n        api.emit(`${taskId}_results`, rout);\n        results.push(rout);\n      }\n      if (resultVar) {\n        api.store[resultVar] = results;\n      }\n      return results;\n    } catch (error) {\n      let llmResponse = await api.conversation.chat([\n        {\n          role: 'system',\n          content: 'Analyze the provided error details and generate a fix or provide guidance on resolving the issue.',\n        },\n        {\n          role: 'user',\n          content: JSON.stringify({\n            error: error.message,\n            stackTrace: error.stack,\n            context: { prompt, model, resultVar },\n          }),\n        },\n      ]);\n      llmResponse = llmResponse.content[0].text.trim();\n      if (llmResponse.fix) {\n        return llmResponse.fix;\n      }\n    }\n  }\n\n}\n\nmodule.exports = new call_agentTool();",
      "tags": [
        "utility"
      ],
      "schema": {
        "name": "call_agent",
        "methodSignature": "call_agent(params: { prompt: string, model?: string, resultVar?: string }): any",
        "description": "Call the agent with the given task to perform."
      },
      "testHarness": "",
      "lastTestResult": null,
      "metrics": {
        "versions": [
          "1.0.0"
        ],
        "totalUpdates": 0,
        "lastUpdated": "2024-06-27T23:38:47.118Z",
        "testResults": {
          "totalRuns": 0,
          "passed": 0,
          "failed": 0,
          "lastRun": null
        },
        "executionStats": {
          "totalExecutions": 0,
          "averageExecutionTime": 0,
          "lastExecutionTime": null,
          "fastestExecutionTime": null,
          "slowestExecutionTime": 0
        },
        "errorRate": 0,
        "usageCount": 0
      },
      "_path": "/Users/sschepis/ai-assistant/tool_repo/call_agent",
      "metadata": {
        "originalQuery": "",
        "creationDate": "2024-06-27T23:38:47.118Z",
        "lastModifiedDate": "2024-06-27T23:38:47.118Z",
        "author": "Unknown",
        "version": "1.0.0",
        "tags": [],
        "dependencies": []
      }
    }
  ]
}